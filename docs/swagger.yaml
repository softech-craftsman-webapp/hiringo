basePath: /
definitions:
  category.CreateCategoryRequest:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  job.CreateJobRequest:
    properties:
      descriptions:
        type: string
      image:
        type: string
      is_equipment_required:
        type: boolean
      name:
        type: string
      valid_until:
        type: string
    required:
    - descriptions
    - name
    type: object
  location.CreateLocationRequest:
    properties:
      latitude:
        type: number
      longitude:
        type: number
    required:
    - latitude
    - longitude
    type: object
  location.CreateTransactionRequest:
    properties:
      amount:
        type: number
      currency:
        type: string
    required:
    - amount
    - currency
    type: object
  rating.CreateRatingRequest:
    properties:
      comment:
        type: string
      contract_id:
        type: string
      points:
        type: integer
      user_id:
        type: string
    required:
    - comment
    - contract_id
    - points
    - user_id
    type: object
  userDetail.CreateUserDetailRequest:
    properties:
      bio:
        type: string
      email:
        type: string
      location_id:
        type: string
      telephone:
        type: string
    required:
    - email
    - telephone
    type: object
  userDetail.UpdateUserDetailRequest:
    properties:
      bio:
        type: string
      email:
        type: string
      location_id:
        type: string
      telephone:
        type: string
    required:
    - email
    - telephone
    type: object
  view.CategoryEmptyView:
    properties:
      id:
        type: string
    type: object
  view.CategoryView:
    properties:
      created_by_id:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  view.JobEmptyView:
    properties:
      id:
        type: string
    type: object
  view.LocationEmptyView:
    properties:
      id:
        type: string
    type: object
  view.LocationView:
    properties:
      address:
        type: string
      city:
        type: string
      country:
        type: string
      country_code:
        type: string
      county:
        type: string
      house_number:
        type: string
      id:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      postcode:
        type: string
      state:
        type: string
      state_code:
        type: string
      state_district:
        type: string
      street:
        type: string
      suburb:
        type: string
      user_id:
        type: string
    type: object
  view.RatingView:
    properties:
      comment:
        type: string
      contract_id:
        type: string
      id:
        type: string
      points:
        type: integer
      submitted_by_id:
        type: string
      user_id:
        type: string
    type: object
  view.Response:
    properties:
      message:
        type: string
      payload: {}
      success:
        type: boolean
    type: object
  view.TransactionView:
    properties:
      amount:
        type: number
      currency:
        type: string
      id:
        type: string
      user_id:
        type: string
    type: object
  view.UserDetailView:
    properties:
      bio:
        type: string
      email:
        type: string
      id:
        type: string
      location_id:
        type: string
      telephone:
        type: string
      user_id:
        type: string
    type: object
host: 127.0.0.1:8888
info:
  contact: {}
  description: Hiringo API Service.
  title: Hiringo API
  version: "1.0"
paths:
  /categories:
    post:
      consumes:
      - application/json
      description: Create Category
      parameters:
      - description: Category for Job
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/category.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.CategoryView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - category
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete category
      parameters:
      - description: Category id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.CategoryEmptyView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - category
  /jobs:
    post:
      consumes:
      - application/json
      description: Create Job
      parameters:
      - description: Job related informations
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/job.CreateJobRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.RatingView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - job
  /jobs/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Job
      parameters:
      - description: Job id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.JobEmptyView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - job
  /locations:
    post:
      consumes:
      - application/json
      description: Create Location
      parameters:
      - description: Geolocation coordinates (longitude and latitude)
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/location.CreateLocationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.LocationView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - location
  /locations/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Location
      parameters:
      - description: Location id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.LocationEmptyView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - location
  /ratings:
    post:
      consumes:
      - application/json
      description: Create Rating
      parameters:
      - description: User id (send points to user) and points
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/rating.CreateRatingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.RatingView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - rating
  /transactions:
    post:
      consumes:
      - application/json
      description: Create Transaction
      parameters:
      - description: Amount and Currency
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/location.CreateTransactionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.TransactionView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - transaction
  /user-details:
    post:
      consumes:
      - application/json
      description: Create Category
      parameters:
      - description: User details for user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/userDetail.CreateUserDetailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.UserDetailView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - user-detail
  /user-details/{id}:
    put:
      consumes:
      - application/json
      description: Update user details
      parameters:
      - description: User Detail id
        in: path
        name: id
        required: true
        type: string
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/userDetail.UpdateUserDetailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.UserDetailView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - user-detail
  /user-details/{id}/reveal:
    post:
      consumes:
      - application/json
      description: Get user details by contract id
      parameters:
      - description: User Detail id
        in: path
        name: id
        required: true
        type: string
      - description: Contract details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/userDetail.CreateUserDetailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.UserDetailView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - user-detail
securityDefinitions:
  JWT:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
