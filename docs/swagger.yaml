basePath: /
definitions:
  category.CreateCategoryRequest:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  contract.CreateContractRequest:
    properties:
      end_time:
        type: string
      job_id:
        type: string
      start_time:
        type: string
    required:
    - end_time
    - job_id
    - start_time
    type: object
  contract.UpdateContractRequest:
    properties:
      end_time:
        type: string
      start_time:
        type: string
    required:
    - end_time
    - start_time
    type: object
  job.CreateJobRequest:
    properties:
      category_id:
        type: string
      descriptions:
        type: string
      is_equipment_required:
        type: boolean
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
      transaction_id:
        type: string
      valid_until:
        type: string
    required:
    - category_id
    - descriptions
    - latitude
    - longitude
    - name
    - transaction_id
    - valid_until
    type: object
  job.SeachJobRequest:
    properties:
      category_id:
        type: string
      description:
        type: string
      is_equipment_required:
        type: boolean
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
    required:
    - latitude
    - longitude
    - name
    type: object
  job.UpdateJobImageRequest:
    properties:
      image:
        type: string
    required:
    - image
    type: object
  job.UpdateJobRequest:
    properties:
      category_id:
        type: string
      descriptions:
        type: string
      is_equipment_required:
        type: boolean
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
      transaction_id:
        type: string
      valid_until:
        type: string
    required:
    - category_id
    - descriptions
    - latitude
    - longitude
    - name
    - transaction_id
    - valid_until
    type: object
  location.CreateLocationRequest:
    properties:
      latitude:
        type: number
      longitude:
        type: number
    required:
    - latitude
    - longitude
    type: object
  paginator.Pagination:
    properties:
      limit:
        type: integer
      nextPage:
        type: integer
      offset:
        type: integer
      page:
        type: integer
      prevPage:
        type: integer
      totalPage:
        type: integer
      totalRecords:
        type: integer
    type: object
  rating.CreateRatingRequest:
    properties:
      comment:
        type: string
      contract_id:
        type: string
      points:
        type: integer
      user_id:
        type: string
    required:
    - comment
    - contract_id
    - points
    - user_id
    type: object
  transaction.CreateTransactionRequest:
    properties:
      amount:
        type: number
      currency:
        type: string
    required:
    - amount
    - currency
    type: object
  userDetail.CreateUserDetailRequest:
    properties:
      bio:
        type: string
      email:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      telephone:
        type: string
    required:
    - bio
    - email
    - latitude
    - longitude
    - telephone
    type: object
  userDetail.RevealUserDetailRequest:
    properties:
      contract_id:
        type: string
    type: object
  userDetail.UpdateUserDetailRequest:
    properties:
      bio:
        type: string
      email:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      telephone:
        type: string
    required:
    - bio
    - email
    - latitude
    - longitude
    - telephone
    type: object
  view.CategoryEmptyView:
    properties:
      id:
        type: string
    type: object
  view.CategoryView:
    properties:
      created_by_id:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  view.ContractEmptyView:
    properties:
      id:
        type: string
    type: object
  view.ContractView:
    properties:
      end_time:
        type: string
      id:
        type: string
      job_id:
        type: string
      professional_id:
        type: string
      recruiter_id:
        type: string
      signed_by_professional_time:
        type: string
      signed_by_recruiter_time:
        type: string
      start_time:
        type: string
    type: object
  view.CoordinatesView:
    properties:
      ip:
        type: string
      lat:
        type: number
      lon:
        type: number
    type: object
  view.JobEmptyView:
    properties:
      id:
        type: string
    type: object
  view.JobPaginationView:
    properties:
      items:
        items:
          $ref: '#/definitions/view.JobView'
        type: array
      pagination:
        $ref: '#/definitions/paginator.Pagination'
    type: object
  view.JobView:
    properties:
      category_id:
        type: string
      description:
        type: string
      distance:
        type: number
      id:
        type: string
      image:
        type: string
      is_contract_signed:
        type: boolean
      is_equipment_required:
        type: boolean
      is_premium:
        type: boolean
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
      transaction_id:
        type: string
      user_id:
        type: string
      valid_until:
        type: string
    type: object
  view.LocationView:
    properties:
      address:
        properties:
          city_district:
            type: string
          country:
            type: string
          country_code:
            type: string
          house_number:
            type: string
          postcode:
            type: string
          region:
            type: string
          road:
            type: string
          suburb:
            type: string
        type: object
      boundingbox:
        items:
          type: string
        type: array
      display_name:
        type: string
      lat:
        type: string
      lon:
        type: string
      osm_id:
        type: integer
      osm_type:
        type: string
      place_id:
        type: integer
    type: object
  view.MyJobView:
    properties:
      applied:
        items:
          $ref: '#/definitions/view.JobView'
        type: array
      created:
        items:
          $ref: '#/definitions/view.JobView'
        type: array
    type: object
  view.PublicCategoryView:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  view.RatingView:
    properties:
      comment:
        type: string
      contract_id:
        type: string
      id:
        type: string
      points:
        type: integer
      submitted_by_id:
        type: string
      user_id:
        type: string
    type: object
  view.Response:
    properties:
      message:
        type: string
      payload: {}
      success:
        type: boolean
    type: object
  view.TransactionView:
    properties:
      amount:
        type: number
      currency:
        type: string
      id:
        type: string
      user_id:
        type: string
    type: object
  view.UserDetailEmptyView:
    properties:
      id:
        type: string
    type: object
  view.UserDetailView:
    properties:
      bio:
        type: string
      email:
        type: string
      id:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      telephone:
        type: string
      user_id:
        type: string
    type: object
  view.UserRatingDetailView:
    properties:
      id:
        type: string
      rating:
        type: number
      total_rates:
        type: integer
    type: object
host: main-api.hiringo.tech
info:
  contact:
    email: admin@hiringo.tech
    name: Emin Muhammadi
    url: https://github.com/softech-craftsman-webapp/hiringo
  description: Hiringo API Service.
  title: Hiringo API
  version: "1.0"
paths:
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete category
      parameters:
      - description: Category id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.CategoryEmptyView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - category
    get:
      consumes:
      - application/json
      description: Get category Details
      parameters:
      - description: Category id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.CategoryView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - category
  /categories/all:
    get:
      consumes:
      - application/json
      description: Get user details
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  items:
                    $ref: '#/definitions/view.PublicCategoryView'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - category
  /categories/new:
    post:
      consumes:
      - application/json
      description: Create Category
      parameters:
      - description: Category for Job
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/category.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.CategoryView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - category
  /contracts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete contract
      parameters:
      - description: Contract id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.ContractEmptyView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - contract
    get:
      consumes:
      - application/json
      description: Get Contract Detail
      parameters:
      - description: Contract id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.ContractView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - contract
    put:
      consumes:
      - application/json
      description: Update Contract
      parameters:
      - description: Contract id
        in: path
        name: id
        required: true
        type: string
      - description: Contract details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/contract.UpdateContractRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.ContractEmptyView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - contract
  /contracts/{id}/sign:
    post:
      consumes:
      - application/json
      description: Sign Contract by Recruiter
      parameters:
      - description: Contract id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.ContractEmptyView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - contract
  /contracts/my:
    get:
      consumes:
      - application/json
      description: Get Job Contracts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  items:
                    $ref: '#/definitions/view.ContractView'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - contract
  /contracts/new:
    post:
      consumes:
      - application/json
      description: Create Contract
      parameters:
      - description: Contract for Job
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/contract.CreateContractRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.ContractView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - contract
  /jobs/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Job
      parameters:
      - description: Job id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.JobEmptyView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - job
    get:
      consumes:
      - application/json
      description: Get Job Details
      parameters:
      - description: Job id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.JobView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - job
    put:
      consumes:
      - application/json
      description: Create Job
      parameters:
      - description: Job id
        in: path
        name: id
        required: true
        type: string
      - description: Job related informations
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/job.UpdateJobRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.JobView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - job
  /jobs/{id}/contracts:
    get:
      consumes:
      - application/json
      description: Get Job Contracts
      parameters:
      - description: Contract id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  items:
                    $ref: '#/definitions/view.ContractView'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - contract
  /jobs/{id}/image:
    put:
      consumes:
      - application/json
      description: Create Job
      parameters:
      - description: Job id
        in: path
        name: id
        required: true
        type: string
      - description: Job related informations
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/job.UpdateJobImageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.JobView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - job
  /jobs/my:
    get:
      consumes:
      - application/json
      description: Get Job Detail for authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.MyJobView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - job
  /jobs/new:
    post:
      consumes:
      - application/json
      description: Create Job
      parameters:
      - description: Job related informations
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/job.CreateJobRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.JobView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - job
  /jobs/search:
    post:
      consumes:
      - application/json
      description: Search jobs
      parameters:
      - description: Job related informations
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/job.SeachJobRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.JobPaginationView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - job
  /locations/coordinates:
    get:
      consumes:
      - application/json
      description: Create Location
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.CoordinatesView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - location
  /locations/search:
    post:
      consumes:
      - application/json
      description: Create Location
      parameters:
      - description: Geolocation coordinates (longitude and latitude)
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/location.CreateLocationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.LocationView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - location
  /ratings/{id}:
    get:
      consumes:
      - application/json
      description: Get rating Details
      parameters:
      - description: Rating id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.RatingView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - rating
  /ratings/new:
    post:
      consumes:
      - application/json
      description: Create Rating
      parameters:
      - description: User id (send points to user) and points
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/rating.CreateRatingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.RatingView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - rating
  /transactions/{id}:
    get:
      consumes:
      - application/json
      description: Get transaction Details
      parameters:
      - description: Transaction id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.TransactionView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - transaction
  /transactions/my:
    get:
      consumes:
      - application/json
      description: Get user details
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  items:
                    $ref: '#/definitions/view.TransactionView'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - transaction
  /transactions/new:
    post:
      consumes:
      - application/json
      description: Create Transaction
      parameters:
      - description: Amount and Currency
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/transaction.CreateTransactionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.TransactionView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - transaction
  /user-details/{id}:
    put:
      consumes:
      - application/json
      description: Update user details
      parameters:
      - description: User Detail id
        in: path
        name: id
        required: true
        type: string
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/userDetail.UpdateUserDetailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.UserDetailEmptyView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - user-detail
  /user-details/{id}/rating:
    get:
      consumes:
      - application/json
      description: Get user average rating
      parameters:
      - description: Rating id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.UserRatingDetailView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - user-detail
  /user-details/{id}/reveal:
    post:
      consumes:
      - application/json
      description: Get user details by contract id
      parameters:
      - description: User Detail id
        in: path
        name: id
        required: true
        type: string
      - description: Contract details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/userDetail.RevealUserDetailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.UserDetailView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - user-detail
  /user-details/my:
    post:
      consumes:
      - application/json
      description: Get user's details
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.UserDetailView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - user-detail
  /user-details/new:
    post:
      consumes:
      - application/json
      description: Create Category
      parameters:
      - description: User details for user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/userDetail.CreateUserDetailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/view.Response'
            - properties:
                payload:
                  $ref: '#/definitions/view.UserDetailView'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/view.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/view.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/view.Response'
      security:
      - JWT: []
      tags:
      - user-detail
securityDefinitions:
  JWT:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
